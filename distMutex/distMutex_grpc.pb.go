// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: distMutex/distMutex.proto

package distMutex

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DistMutexClient is the client API for DistMutex service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistMutexClient interface {
	Connect(ctx context.Context, in *Void, opts ...grpc.CallOption) (DistMutex_ConnectClient, error)
}

type distMutexClient struct {
	cc grpc.ClientConnInterface
}

func NewDistMutexClient(cc grpc.ClientConnInterface) DistMutexClient {
	return &distMutexClient{cc}
}

func (c *distMutexClient) Connect(ctx context.Context, in *Void, opts ...grpc.CallOption) (DistMutex_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &DistMutex_ServiceDesc.Streams[0], "/distMutex.DistMutex/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &distMutexConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type DistMutex_ConnectClient interface {
	Recv() (*Message, error)
	grpc.ClientStream
}

type distMutexConnectClient struct {
	grpc.ClientStream
}

func (x *distMutexConnectClient) Recv() (*Message, error) {
	m := new(Message)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DistMutexServer is the server API for DistMutex service.
// All implementations must embed UnimplementedDistMutexServer
// for forward compatibility
type DistMutexServer interface {
	Connect(*Void, DistMutex_ConnectServer) error
	mustEmbedUnimplementedDistMutexServer()
}

// UnimplementedDistMutexServer must be embedded to have forward compatible implementations.
type UnimplementedDistMutexServer struct {
}

func (UnimplementedDistMutexServer) Connect(*Void, DistMutex_ConnectServer) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedDistMutexServer) mustEmbedUnimplementedDistMutexServer() {}

// UnsafeDistMutexServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistMutexServer will
// result in compilation errors.
type UnsafeDistMutexServer interface {
	mustEmbedUnimplementedDistMutexServer()
}

func RegisterDistMutexServer(s grpc.ServiceRegistrar, srv DistMutexServer) {
	s.RegisterService(&DistMutex_ServiceDesc, srv)
}

func _DistMutex_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Void)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(DistMutexServer).Connect(m, &distMutexConnectServer{stream})
}

type DistMutex_ConnectServer interface {
	Send(*Message) error
	grpc.ServerStream
}

type distMutexConnectServer struct {
	grpc.ServerStream
}

func (x *distMutexConnectServer) Send(m *Message) error {
	return x.ServerStream.SendMsg(m)
}

// DistMutex_ServiceDesc is the grpc.ServiceDesc for DistMutex service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DistMutex_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distMutex.DistMutex",
	HandlerType: (*DistMutexServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _DistMutex_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "distMutex/distMutex.proto",
}
